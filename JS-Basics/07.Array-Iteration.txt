Array Iteration:
----------------

1. forEach(callback) -> runs the given function once for every item in the array, in order, without returning a new array. The callback function takes (value, index, array) as parameters.

2. map(callback) -> runs the given function for every item in the array and returns a new array with the results, without changing the original array. The callback function takes (value, index, array) as parameters.

3. filter(callback) -> keeps only the items that match the condition and returns them in a new array without changing the original array. The callback function takes (value, index, array) as parameters.

4. reduce() => will have to learn again

5. reduceRight() => will have to learn again

6. every(callback) -> checks if all items satisfy the condition and returns true or false without changing the original array. The callback function takes (value, index, array) as parameters.

6. some(callback) -> checks if at least one item satisfies the condition and returns true or false without changing the original array. The callback function takes (value, index, array) as parameters

7. indexOf(value, fromIndex) → returns the first index at which the specified value is found in the array, or -1 if it is not present. It does not change the original array. fromIndex is optional and specifies the index to start the search from.

8. includes(value, fromIndex) → checks if the array contains the specified value and returns true or false without changing the original array. fromIndex is optional and specifies the index to start the search from.

9. find(callback) → returns the first element in the array that meets the condition, or undefined if no element matches. It does not change the original array. The callback function takes (value, index, array) as parameters.





Best Example for practising:
----------------------------



//checking duplicate and uniques numbers

const numbers = [1, 2, 4, 4, 6, 8, 10, 8, 12, 13, 19];

const duplicates = numbers.filter(function(value, index, array){
  return array.indexOf(value) !== index
  //return array.indexOf(value) === index
});